WORKING OF MEDIA QUERIES
- Media queiries can be seen as tools, that automatically change certain CSS rules at specific window-width breakpoints.
- When working wih media queries, we use Device bar im devtools, to preview the site in different screen sizes.

WORKING WITH MEDIA QUERIES
- When adding resposiveness to the page, it's handy to create a specific file just for media queries.
- The are two techniques of adding media quries that should be combined to achieve better layouts. First is using certain ranges of device widths, specifically, 600px, 900px, 1200px. Secon is manually decrease the size of our window, and then adding media querie in places where layout breaks.
- 'rem' and 'em' do NOT depend on font-size stated in the HTML document when sizing media queries. Rgerefore, we divide the needed pixel value by 16 to get the rem value. It's better to use 'em' units when working with media queries.

RESPONSIVE TO SMALL LAPTOPS
- 1366px is a common small laptops display size (mine, for example), can be used as a starting point.
- Adding to many media queries to fix every single problem is a bad pracice. It's better to define a couple of key device sizes and fix al problems there.

RESPONSIVE TO LANDSCAPE TABLETS
- Starting width for moble devices is 1200px. At this width the design doesn't usually break, but most of the elements will look huge, so we need to adjust the sizing.
- To decrease sizes of all contetn, we simply change the font-size in the html element.

RESPONSIVE TO PORTRAIT TABLETS
- Key device widths: laptop L 1440px/ laptop m 1200px/ laptop s 1024px / tablet l 900px/ tablet s 768px/ mobile l 425px / mobile m 375px / mobile s 320px

MAKING MOBIE NAVIGATION
- When you having a long menu bar a the header of the site, for mobile devices it's better to hide them im a menue, behind a single button.
- Menu has an open button, and an close button. Each button should have an icon. Fistly, we add both icons to the button content.
- In CSS we can select elements based on their attributes. Using [] we can specify the attribute of the needed item. For example, whe we have two icons with same class but diferent names we simply select needed one by it's name.
- When building components that change states, we add classes to their parennt elements based on each state.
- To properly disable an element without using 'display: none', we go through 3 steps: 1. Hiding the element visually by setting opacity to 0. 2. Making it unaccesible to mouse and keyboard by seting pointer-events to none. 3. Hiding it from screen readers by setting visibility to hidden.
- When making a hidden menu the defaul state of it should be hiden, but opened state should be toggled by adding opening class to the certain rules.
- To make the menu appear from the site, we use transformX or tansformY, to push it ou of the viewport on it's default state. In the opened state, we set transfor to 0 to make it look like it's appearing from the back.