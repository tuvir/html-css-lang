CSS INTRODUCTION
- CSS stands for Cascade Style Sheets, is used to style content written in HTML code using diferent properties.
- CSS properties are used to format the content: changing color, layout, spacing font etc.
- CSS rule is a code structure that consists of several elements: 1. Selector - it says to which HTML element on the page the rule contents referr to. 2. Declaration block - this block itself consists of several things. It is written after the selector iside the curly braces.
- Declaration block is made out of so called declarations (or styles) which consist of two parts - properties and values. Properties, for example, 'color' change the their respective qualities of HTML element. Values, in this case, 'red' are needed to specify the change. Values can be both numerical and text.
- CSS rule example - h1{color: red; font-size: 15px.}

INLINE, INTERNAL AND EXTERNAL CSS
- The are three main ways to write CSS - inline (inside of opening tag of each HTML element), internal (inside the <style> tag in the <head> section of HTML document) and exteranl (when we create separate file fo all the CSS code). External is the best way to wite CSS, first two options are not commonly used due to their inefficiency.
- To connect the HTML document with CSS styles file <link/> tag is used. It's placed in the <head> of HTML file. It's href attribute value points to the CSS file, like this: ="style.css". It's useful to include 'rel' attribute, to tell HTML file that we point to the stylesheet CSS file, like this: ="stylesheet".

STYLING TEXT
- There are many properties to style text, most commonly used ones are: font-size, font-family. 
- It is better to write CSS rules according the order of the HTML elements on the page, from top to bottom. It is also preferable to group elements of one family together in the CSS file, fo example, all the <h> tags are better be included on top of CSS file together.

COMBINING SELECTORS
- Selectors can be combined in a list. For example, when we need to set 'font-family' propery to all of text tags, we can order all neede tags in a list and then apply their common property, rather than manually changing it in all specific rules.
- ANother way to combine selctors is to combine parent selector with it's child selector, to make the properties change only the needed child selector. For example, when we need change only one <p> element in big <h> element we can write selctor like this: h p {}. This way of combining is called 'nesting' and is not the best one to use, since we can give names to the tags for better navigation.

CLASSES AND ID SELECTORS
- To make names of specific tags more unique 'id' attribute can be used, for example, <p id="copyright>. This will allow us to choose only the specific tag inside a parent tag.
- To choose the id tag we use '#' selector after which we write the id name. Id names can't be repeated.
- Another way to give unique names is to use 'class' attribute, for example, <p class="related-posts">. Class names CAN be repeated, which makes it more easier to divide elements using classes rather than id's.
- To choose the class tag '.' selector is used. Classes are used most of the time, since using of id's can lead to
errors and harden the future code refactoring.

WORKING WITH COLORS
- To work with pure colors, we usually use hexadecimal notation (#00ffff) and to work with transparent colors we use rgba notation 
(rgba(0, 255, 255, 0.3)).
- In both if these notations first group numbers is the red color, then green color and finally blue color.
- Fourth number is responsible for transparency, which can go from 0.1 to 1.0.
- Hexadecimal notation has a short type, which can be used when all 4 channels have the same value, for eaxmple, white and greay colors - #444 or #fff;
- It is important to group tags that we want to format in the same way via classes or tag lists.

PSEUDO CLASSES
- Pseudo classes are speacial tools, that allow us to not making classses ourselves rather than letting CSS take needed elements for us.
- For example, instead of manually writing our own class for first elements of every list, we can make CSS do that for us. The syntax is: li:fist-child {color #f2f}

STYLING LINKS
- It's a good practice to use comments for dividing the CSS file in to logicla groups of elements that ve are styling.
- When styling hyperlinks it is better to NOT use the <a> selector, but to use multiple pseudo classes with it, to target different states of hyperlinks.
- Order of link styling pseudo classes is always the same - a:link, a:visited, a:hover, a:active or LVHA for short.

USING DEVTOOLS
- DevTools are a poverful platform that exists in the browser. It can be used for different purposes, mainly, testing the webpage.
- We can select individual HTML elements in the 'Elements' section of DevTools.
- After selecting a specific HTML element we can see it's applied CSS styles in the 'Styles' menu.

CONFLICTS BETWEEN SELECTORS
- When HTML element has multiple CSS rules, that can change it, for example a paragraph, that is changed with a .class, #id and manual p selection, ALL of the changes are applied at once.
- But, when we have multiple identical properties with different values through our CSS rules, for example, multiple font-size properties, that conflict with each other, CSS auotomatically solves these conflicts.
- What will CSS do is determined by selector priority. #id selectors have highest priority, then goes .class or :pseudo-class selectors, then <element> selectors, then *universal selector.
- If ve have multiple selectors of the same type, the applied one will be the LAST selector in the code. (It's more complicated in reality).
- There are two things that are higher priority than the #id selector: inline style and !important keyword (added in CSS file after the needed property). Inline style is not used and !important keywor is the last resort, that is rarely used either.

INHERITANCE AND UNIVERSAL SELECTORS
- Inheritance is a mechanism, by which child elements inherit some of their parent elements properies.
- Inherited rules have the lowest priority an can be owerwritten by the other rules. For example, when we have a <body> element and set it's color to blue, and then add <h1> element to the <body>, color of <h1> will be inherited from the <body> and would be blue. But if we were to set <h1> color to red, it woud overwrite the inherited rule, thus making <h1> color red.
- Inheritance allows us to set default properties to the parent element, that will eventually have a lot of child elements. Inheritance is handy to set such properties as 'color' and 'font-family' in <body> element of the page, to apply the same basic propeties to all of the child elements.
- The properies that do get inherited are ones related to text: font-size, family, weight; text-transform, shadow, align etc. Most of the other properties DO NOT get inherited.
- Inheritance mechanism doesn't work on *universal selector. *selector simply applies it's properties to ALL elements of the page. But, since it has the lowest selector priority, it can be overvritten by everything else.
- *universal selector and <body> selector are NOT the same, since inheritance works on <body>, thus not all properties will be inherited by the child elements of the <body>.

CODING A SNEKER SHOP COMPONENT
- It's best to use classes as a selctors, even in cases when we have a single unique HTML element, for example, <h1>, it is still better to give it a class, that will reflect it's content and change it in the CSS file using class selector. This technique improves code readability.

CSS BOX MODEL
- CSS Box model defines how elements are displayed and sized. Box model is a concept by which each element of a webpage can bee seen as a rectangle, that has it's borders, content, and empty space inside and outside the element.
- Each element on the webpage has 4 parametersof the box model: 1. Content area - space where the elemeny content lies. 2. Padding - free space between content area and the border. 3. Border - invisible by default border encircles the padding and content area inside it. 4. Margin - empty space that is located outside the border.
- Each of thse parameters can be changed manually, but some of them usually have their default value.
- The height and width of the element consits of it's left and right border sizes, left and right padding sizes and the content area size. Margin does not get included into these calculations. This is a default behavior of box model but it can be changed.

USING MARGINS AND PADDINGS
- Margins and paddings can be manually change to structure the webpage better. We can both add and remove the space between individual elements, using properties like 'margin' and 'padding'.
- Usually a lot of HTML elements like <h> have default size of margin. To get rid of them and make custommargins ourselves, 'global reset technique' is used.
- To remove all the default paddings and margins, we use *universal selector and inside of it, set 'padding' and 'margin' to 0. This is one of the first things that you can do in the beggining of a project.
- Important thing when making free space between elements is to use a single type of margin. Margin-bottom is preferable.
- There is a rule caled 'collapsing margins' that as being applied to the two conflicting margins between two elements. This rule works in a way that the displayed margin will be the larger one, they won't add up to each other. For example if we have h1 margin-bottom: 40px and h2 margin-top: 60px, final margin size won't be 100px, but 60px, since h2 margin-top is larger.
- Rule of choosing eiteher margins or paddings: if you need to create space INSIDE of an element, that has borders or background color, you use PADDING. To create space OUTSIDE or BETWEEn the individual elements, you use margin. Tis rule also applies to the child elements within parent element. And stick to the 'margin-bottom'.

USING HEIGHT AND WIDTH DIMENSIONS
- Width has a simple princinple of working, when it's default value will be the size of the page/screen, and it can be manually changed via 'width' property in the CSS rule.
- Height has a more complicated calculations, due to default behavior of the Box model. It works in such a way, that actual height of an element will be a sum of 'height' property value (which is zero by default) and paddings value. So if we set the 'height' property to 80, and athe same time have 'padding-bottom' being set to 30, the final height of an element will be 110.
- To edit the dimensions of an image, we can use both HTML attributes and CSS properties. We can set strtin dimensions in HTML, but to make the size of our image adaptive to the size of the screen, we can use CSS property 'width' with 'height' property set to 'auto'.
- In CSS width not only can be expressed in pixels, but also int percents. The percet value vill represent quantity of parent container that our image will take. For example, value of 50% will mean, that image always be a half the size of it's parent container. And the value of 100% will mean that the image will always be the size of it's parent container.

CENTERING THE PAGE
- An easy way to center our webpage is to create a <div> and place all contents of a body inside of it. Then, give this div a class and set it's right and left margins to auto. Then, set it's width property to some amount and this will make the page aoutomatically center itself.

WORKING WITH PADDINGS AND MARGINS ON A SNEAKER COMPONENT.
- It's very handy to remove all borders using *universal selector at the begginig of the CSS file.

TYPES OF BOXES
- The content boxes that occupy pnly the space of their size called Inline boxes. This type includes: images, <strong> and <a> elements etc. Heights and widths do not apply to these elements as well as the margins and paddings only applied left and righths.
- The boxes that take 100% of the parent element width and grow/hinder adaptively called Block level boxes. This type includes most of the elements by default like <body>, <header>, <h>, <p> etc. They are stcked vertically one after another by default.
- It's possible to change inline elements into block elements and vise versa by CSS property 'display'. On inline elements ve use 'display: block' and 'display: inline' on a block element.
- Third type of box is a 'Inline block box'. It takes only needed space and doesn't have any linebreaks, like Inline box, but heights and margins can all be applied to it, like Block box.

ELEMENT POSITIONING MODES
- First element positioning mode is called 'Normal flow'. In this mode elements are simply laid out as staded in the HTML document. To  enable this mode property 'postion' should be set to 'relative'.
- Second mode is called 'Absolute positioning'. This mode lets to position the element withou any effect on surrounding element, which can result in overlapping elements. To position the lement in this mode we use positionong keywrds. To enable this mode 'position' is set to 'absolute'.
- To set the element at the desired place of the the page, we need to set the positioning mode of the wanted element to 'absolute' and the positioning mode of the element inside of which we need the wanted element to 'relative'. For example, if we want a button to be at the bottom-right corner of the page, we can set <button> to 'absolute' and the <body> to 'relative.
- Using of 'absolute' positioning should be specific. It should not be used for all individual elements, but is is a powerful and handy tool in some cases.

PSEUDO ELEMENTS
- Pseuso elements are a tool that allows us to choose elements without making them manually. To choose a pseudo element we type to semicolumns, like this: '::'. For example, to choose first letter of <h1> element instead of making it an actual element, we can use pseudo class: 'h1"::first-letter'.
- Adjacent selector (+) is a selector that allows us to choose the very first sibling of an element. A sibling element is an element that has a common parent like <article> and all of child elements of it will be siblings. So we can choose all h3 elements and with the adjacent selector choose all first p elements, like this: h3 + p::first-line.
- 'after' pseudo element tells to create an element rigth after the chosen one - h1::after. To make this pseudo element work we ALWAYS should to specify the content property, even if it's going to be empty. 'before' allows us to create an element before the neede element.

FIXING BUGS
- A good way to check HTML code for bugs is to use HTML online validator. Simply paste your code there and it will highlight all the syntatctic errors or unclose tags that you can fix in the code editor.
- To compare your code with other code to check for minor differencies, Diffchecker site can be used.
- Keping selector names simple is essential for avoiding bugs and making code easier to understand.
- To find a bug you can use the Devtools. For example, to see which selector is actyally changes the element an find it in the CSS file.

WORKING WITH POSITIONING AND BOXES ON A SNEAKER COMPONENT
- You can add multiple classnames into the single element, whus making it possible to change it with multiple classes. 