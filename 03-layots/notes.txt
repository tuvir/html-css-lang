THREE WAYS OF BUILDING LAYOUTS
- Layout is a structure by which text, images and other ements of content are placed on a page. It gives the page a visual structure, into which we place the content.
- Building a layout is a process of arranging elements of a page into specific structure instead of having them place one after another (normal flow structure).
- Main types of layouts are page layoit and component layout. Page layout is made out of individual components that are, which are made out of individual elements themselves. Components are used as buildig blocks.
- Firts way of building layout is Float layouts. It depends on using 'float' CSS property and is used in older websites.
- Second way is Flexbox. It's used for laying out elements in a 1-dimensional row. Used for simple components.
- Third and most common way is CSS grid. Used for making 2-dimensional grid. Perfect for making pages and complex components.

FLOAT PROPERTY
- Float property makes element kinda have an absolute position, in a way that floated element stops affecting others.
- A good example of this is when we make child element with background color floated and it's backround which is set in parent elements shrinks. This is happening due to to the float property making child element sort of nonexistent thus making parent element's height zero and shrinking the backround. This phenomenon is called collapsing elements.
- For example, if we have a <header> parent with padding of 20 on top and bottom, with <h1> child, which height is 40, the final height of the element is 80. WHen we make <h1> float, it takes <h1>'s 40 height out, leavin only the 40 of <header> padding.
- When comparing floats to absolute positioning, their similarity is that the are bth being taken out of the noraml flow. But the difference of floats are such: 1. Text and inline elements will wrap around the floated element insted of leaning on them. 2. The container of floated element will not adjust it's height to the element.

CLEARING FLOATS
- To fix collapsed elements we make empty element inside the collapsed parent element. Then, in CSS file we give this element property 'clear' and set it to 'both'.
- The better technique to clear floats, is to make a pseudo element after in collapsed parent element, in which we add 'clear' property. Thi way is better because we won't have too much repetative code contructions.

BUILDING A SIMPLE FLOAT LAYOUT
- To make biulding a layout easier, it is good to add a temporary background color to all of the elements for better visualisation of the grid.

BETTER BOX MODEL BEHAVIOR
- Default box model behavior creates problems when building complex layouts. To avoid them, 'box-sizing' property is set to 'border-box'.
- The way that this method works, is that it always makes the lement have the defined width, without adding paddin or borer to the defined width, like default box model. WHenever we add pading to the box-sized element, it doesn't add the size of the padding to the size of the element, but takes it from the content area of the element, making it smaller. But the size of the element always stays the same!
- 'box sizing: border-box' is the go-to type of boxmodel and is usually applied to every element of the webpage. To do that, simply addd this property to the universal selector.

FLEXBOX INTRODUCTION
- To use Flexbox we need to set 'display' property to 'flex'. Usually, we use this property inside the 'container' parent element with group of child elements. In this case parent element wiill be called Flex container and child elements will be Flex items.
- The width of flex item will always be exatly the size of the content. The height ill be the size of the tallest flex item. If height is not set to any item, then it will be the size of the content.

FLEXBOX OwERVIEW
- Flexbox is a set if CSS properties for building 1-dimensional layoutsl
- The main idea of flexbox is that an empty space inside the container element can de automatically divided by its child elements.
- Flexbox allows to automatically align elements to one another inside the parent element, both horizontally and vertically.
- Flexbox solves common problems such as vertical centering and creating equal-height columns.
- Flexbox is perfect replacement for floats, allowing us to write cleaner HTML and CSS code, thus making it easier to refactor.
- To start with flexbox we make flex container element, to which we give 'display: flex' property. All the child elements of this flex container will become flex items.
- DIrection n which flex items are laid out is called main axis and is horizontal. Perpendicular axis is caled cross axis. It is always important to know which axis we dealing with, because we can both change their directions and align items by each one of axises.

SPACING AND ALIGNING FLEX ITEMS
- To make a space between flex items, instead of adding a margin, 'gap' property can be used in flex container element.

THE FLEX PROPERTY
- The best way to size flex items is to use 'flex' property on all of the items at once or on individual items. 1st value of flex-grow, 2nd is flex-shrink, 3d is the flex-basis. Syntax example: flex: 0 0 200px;
- Flex properties are applied to the flex items, NOT the flex container.

WORKING WITH FLEXBOX
- When we need to put some elements into flex container, it's usually better to make a new element and pitnede elements inside of it.
- To create space between flex items, both gap and margin are acceptable, but gap is better.  
- When setting width of flex items it's better to compute the width of each flex item manually, by substracting their width and gap from parent flex container.
- The better way is to manually set the width for one flex item and the witdh of other will be adjusted automatically.
- The default value of 'align-items' is stretch, so naturally in a group of flex items all elements will become as long as the longext element. To prevent this, 'align-items' is set to 'flex-start' in the flex container.
- To make flex items automatically adjust their widths simply add 'flex: 1' to all flex items.

CSS GRID INTRODUCTION
- Just like in flexbox, in CSS grid we have 'Grid containers' which are parent elements witc grid properties and 'Grid items' which are child elements of grid container.
- To setup CSS grid, inside the grid container, we give the 'display' property 'grid' value. Then we, enable columns and rows by using 'grid-template-columns' and 'grid-template-rows' properties. The amount of columns/roes is regulated by how much sizes are we adding.
- When using grid, the only way of adding a space between the grid items is to use 'gap' property. Margins are unavaliable for that.
- Gap can be individually set both to columns and rows.

CSS GRID OVERVIEW
- CSS grid is a set of CSS properties that allow us build 2-dimensional layouts.
- The main CSS grid idea is that we can divide parent container into rows and columns in which we place it's child elements.
- CSS grid allows us to write less complicated HTML and CSS, thus makin code easier to understand.
- For a 1d layout flexbox is used, for 2d layout grid is used. They compliment each other well.

SIZING GRID COLUMNS AND ROWS
- New sizing unit 'fr' allows to biuld flexible grid items. Items, given size using 'fr' (stands for 'fractional') will aoutomatically adjust their height and width from the get go, unlike 'px'.
- We can set the column or orw size to auto,so it will alway take only enough space to fill the content area.
- There are two types of rows and columns: explicit and implicit. Explicit are the ones for which we defined the size. Implicit are the ones that appeared automatically. Fr example, if we have a grid container with 4 grid items and we explicitely make 2 columns and 1 row with their respective sizes, 2 elements in the first ro will have their sizes, bu two leftover elements will hop into the second, implicit row, whi win't have a size.
- It's good to define the height of the grid container to make a base height for all rows.

PLACING AND SPACING GRID ITEMS
- To manipulate the sizes and gutters of grid items we add properties to the grid container, however to change the place of the grod item inside the grid add properties to the items themselves, via clasess etc.
- To change the place of grid item, 'grid-column' and 'grid-row' properties are used. In these properties values we specify the the begginning and ending column/row. Other items, around item that changed it's position, will automatically align.
- Not only can we change the items place in the grid, but as well we can change on how much cells does it span through, both vertically and horizontally. This can be done by 'span' keyword which is placed in the value with the numerical value of rows/columns that our item needs to cover.
- The grid has number from 1 to n going from left to right and numbers from -1 to -1 going in opposite direction. WE can use this to stretch a grid item from beggining to end withou calculating how much rows does the grid have. The syntax: grid-columns: 1 / -1;.
